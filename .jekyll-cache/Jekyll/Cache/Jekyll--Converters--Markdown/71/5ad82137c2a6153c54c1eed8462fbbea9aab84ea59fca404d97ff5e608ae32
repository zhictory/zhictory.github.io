I"<p>callee 表示当前正在执行的函数，这个在匿名函数调用自身时很有用。</p>

<p>但是如果有函数名，尽量不要用 arguments.callee。</p>

<p>举个匿名函数使用递归的例子：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>通过命名函数表达式替代 callee：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="nx">factorial</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>另外使用 callee 还有个问题，递归调用会获取到一个不同的 this 值，例如：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nb">global</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">sayThis</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">recursed</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">recursed</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">This is </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">);</span> <span class="c1">// This is [object global]</span>
      <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">!==</span> <span class="nb">global</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">This is </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">);</span> <span class="c1">// This is [object Arguments]</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">This is global</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">sayThis</span><span class="p">();</span>
</code></pre></div></div>

<p>从例子中可以看出，调用 arguments.callee 后的 this 不等于首次调用 sayThis 的对象 global。所以使用 callee 可能会混淆 this，导致功能可能会出现意外的情况。</p>

<p>不仅不推荐用 callee，甚至不推荐用 arguments，看 <a href="http://note.youdao.com/noteshare?id=48fe11146f401f879e4c6f0740aa9be9">arguments 的故事</a>了解原因。</p>

<p>参考：</p>
<blockquote>
  <p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee">arguments.callee</a></p>
</blockquote>
:ET