I"s0<p>命名冲突和文件依赖复杂，是前端开发过程中的两个经典问题。解决方式就是模块化编程。</p>

<p>比如 <a href="https://seajs.github.io/seajs/docs/">Sea.js</a>，一个文件就是一个模块，通过 exports 暴露模块，再通过 require 引入模块。这意味着不需要命名空间了，可以让模块依赖内置。开发者只需关心当前模块的依赖，其他事情 Sea.js 都会自动处理好。对模块开发者来说，这是一种很好的关注度分离。</p>

<p>模块化编程的优点是提高可维护性。</p>

<h2 id="业界遵循的规范">业界遵循的规范</h2>

<ol>
  <li>Node.js 遵循 CommonJs 规范。</li>
  <li>Sea.js 遵循 CMD 规范</li>
  <li>require.js 遵循 AMD 规范。</li>
</ol>

<h2 id="commonjsamdcmdumd-的区别">CommonJs、AMD、CMD、UMD 的区别</h2>

<ol>
  <li>AMD 全称 Asynchronous Module Definition，CMD 全称 Common Module Definition，UMD 全称 Universal Module Definition。</li>
  <li>CommonJs 是同步的，主要用在服务器端，因为模块都是放在服务器，读取速度不成问题。</li>
  <li>AMD、CMD 是异步的，主要用在浏览器端，因为从服务器加载模块需要时间，所以采用异步。</li>
  <li>AMD 输出模块兼容 CommonJs 。</li>
  <li>在编写模块时，AMD 的形式是依赖前置（默认）和依赖就近，CMD 的形式是依赖就近。</li>
  <li>UMD 是 AMD 与 CommonJs 的结合。</li>
</ol>

<h2 id="四种规范的书写例子">四种规范的书写例子</h2>

<p>CommonJs：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hello.js</span>
<span class="kd">var</span> <span class="nx">bye</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./bye.js</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">b</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">b</span><span class="p">:</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bye</span> <span class="o">=</span> <span class="nx">bye</span><span class="p">;</span>
</code></pre></div></div>

<p>AMD：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">define</span><span class="p">([</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ['a', 'c'] 是模块依赖前置</span>
    <span class="nx">a</span><span class="p">();</span>
    <span class="nx">b</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// 输出模块有三种或者不输出</span>
    <span class="c1">// 1 直接 return</span>
    <span class="k">return</span> <span class="nx">b</span><span class="p">;</span>
    <span class="c1">// 2 兼容 CommonJs</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">a</span><span class="p">:</span> <span class="nx">a</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="c1">// 3 兼容 CommonJs</span>
    <span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./hello.js</span><span class="dl">'</span><span class="p">).</span><span class="nx">b</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>CMD：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">define</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./hello.js</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 模块依赖就近</span>
    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./bye.js</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 模块依赖就近</span>
    <span class="nx">a</span><span class="p">();</span>
    <span class="nx">b</span><span class="p">();</span>
    <span class="c1">// 输出模块有三种或者不输出</span>
    <span class="c1">// 1 直接 return</span>
    <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
    <span class="c1">// 2 兼容 CommonJs</span>
    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">a</span><span class="p">:</span> <span class="nx">a</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="c1">// 3 兼容 CommonJs</span>
    <span class="nx">exports</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">})</span>
</code></pre></div></div>

<p>UMD：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// CommonJs</span>
        <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">defind</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// AMD</span>
        <span class="nx">defind</span><span class="p">(</span><span class="nx">factory</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// None</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">eventUtil</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="es6-module">ES6 Module</h2>

<p>最后说一下 ES6 Module，它应该是未来模块化的趋势，现在笔者在写代码也都是用 ES6 模块化语法，再用构建工具编译。</p>

<blockquote>
  <p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
</blockquote>

<blockquote>
  <p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。<br />
CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>
</blockquote>

<p>上面提到运行时加载和编译时加载，ES6 Module 属于后者，即无需加载整个模块后再读取方法，而是在编译时就能指定方法。</p>

<p>ES6 Module 还有个特点是，不仅可以在 JavaScript 文件，也可以在浏览器里使用 Module。</p>

<p>在 JavaScript 使用：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 导出</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">doStuff</span><span class="p">()</span> <span class="p">{}</span>
<span class="c1">// 引入</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">doStuff</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>在浏览器里使用：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script type="module" src="./main.js"&gt;&lt;/script&gt;
// 或
&lt;script type="module"&gt;
  import './main.js';
&lt;/script&gt;
</code></pre></div></div>

<p>目前支持 ES6 Module 的浏览器：</p>
<ul>
  <li>Safari 10.1+</li>
  <li>Chrome 61+</li>
  <li>Firefox 54 需要设置 dom.moduleScripts.enabled</li>
  <li>Edge 16+</li>
</ul>

<p>使用 ES6 Module 需要注意的规范：</p>
<ol>
  <li>注意引用的路径，不支持 main.js，支持 /main.js，./main.js，../main.js，**/main.js</li>
  <li>使用 nomodule 属性向后兼容</li>
  <li>Modules 默认使用 Defer，即慢于同步的请求，但先于显式 Defer 的请求</li>
  <li>引用或内联的 Modules 都支持 Async</li>
  <li>多次引用同一个 Module，只执行一次</li>
  <li>通常需要 CORS，即需要 <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: *</code></li>
  <li>发送请求默认不包括证书</li>
  <li>Modules 需要设置可用的 MIME 类型，否则不会执行</li>
</ol>

<p>最后再贴上一个优秀的 slides，方便读者理解模块化的来龙去脉：<a href="http://huangxuan.me/js-module-7day/">JavaScript 模块化七日谈</a></p>

<p>参考：</p>
<blockquote>
  <p><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法</a><br />
<a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript模块化编程（二）：AMD规范</a><br />
<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a><br />
<a href="http://es6.ruanyifeng.com/#docs/module">ECMAScript 6 入门</a><br />
<a href="https://my.oschina.net/felumanman/blog/263330?p=1">关于 CommonJS AMD CMD UMD</a><br />
<a href="https://lifesinger.wordpress.com/2011/05/17/the-difference-between-seajs-and-requirejs/">SeaJS 和 RequireJS 的异同</a><br />
<a href="https://www.zhihu.com/question/20351507">AMD 和 CMD 的区别有哪些？</a><br />
<a href="https://jakearchibald.com/2017/es-modules-in-browsers/">ECMAScript modules in browsers</a></p>
</blockquote>

:ET